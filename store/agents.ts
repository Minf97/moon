// agentStore.ts
import { create } from "zustand";
import { Agent, AgentStore } from "@/types";
import {
  AGENT_BACKGROUNDS,
  AGENT_SPEED,
  AVATARS,
  GAME_TICK_MS,
  NAMES,
} from "@/lib/constant";
import { useSidebarLogStore } from "./sidebarLog";
import { useConfigStore } from "./config";
import {
  detectEncounter,
  getRandomPosition,
  shouldAgentsTalk,
} from "@/lib/agent";
import { useConversationStore } from "./conversation";
import { callMoonshot } from "@/lib/llm";
import { Conversation } from "../types/agent";

export const useAgentStore = create<AgentStore>((set, get) => ({
  agents: [],
  conversations: {},
  intervalId: null,

  /**
   * ÂàùÂßãÂåñagents
   */
  initAgents: () => {
    const { logMessage } = useSidebarLogStore.getState();
    logMessage("üëã Ê¨¢ËøéÊù•Âà∞Agora", "system");

    // TODO: ËøôÈáåÊòØ mock ÁöÑÔºåÂÆûÈôÖË¶ÅÊé•ÂÖ•Êï∞ÊçÆÂ∫ì or Âå∫ÂùóÈìæ
    const agents: Agent[] = NAMES.map((name, i) => {
      const pos = getRandomPosition();
      return {
        id: `agent-${i}`,
        name,
        x: pos.x,
        y: pos.y,
        target: getRandomPosition(),
        state: "wandering",
        motivation: { action: "wander" },
        lastMessage: "",
        memory: [],
        lastEncounterCheck: {},
        avatar: AVATARS[name as keyof typeof AVATARS],
        background: AGENT_BACKGROUNDS[name as keyof typeof AGENT_BACKGROUNDS],
        conversationId: "",
      };
    });

    const intervalId = setInterval(get().tick, GAME_TICK_MS);
    // ËµãÂÄº
    set({ agents, intervalId: intervalId });

    logMessage("‚úÖ 5‰ΩçAgentÂ∑≤Â∞±‰Ωç„ÄÇ", "system");
    logMessage("üí° ËØ∑ÁÇπÂáªÂ∑¶‰∏äËßíÁöÑ‚ÄúÂºÄÂßãÊ®°Êãü‚ÄùÊåâÈíÆ„ÄÇ", "system");
  },

  cleanup: () => {
    const id = get().intervalId;
    if (id !== null) {
      clearInterval(id);
      set({ intervalId: null });
    }
  },

  /**
   * ÊØèÂ∏ßÊõ¥Êñ∞agentsÁöÑ‰ΩçÁΩÆ
   */
  tick: async () => {
    if (!useConfigStore.getState().gameStart) return;

    const agents = get().agents.map((agent) => {
      // ÁâπÊÆäÁä∂ÊÄÅ‰∏çÁßªÂä®
      if (["talking", "thinking"].includes(agent.state)) return agent;

      const dx = agent.target.x - agent.x;
      const dy = agent.target.y - agent.y;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (distance < 5) {
        // TODO: if (this.state === "finding") Ëøô‰∏™ÈÄªËæëÊ≤°Ë°•ÂÖ®
        return { ...agent, target: getRandomPosition() };
      }

      return {
        ...agent,
        x: agent.x + (dx / distance) * AGENT_SPEED,
        y: agent.y + (dy / distance) * AGENT_SPEED,
      };
    });

    set({ agents });

    try {
      await get().checkEncounters();
    } catch (error) {
      console.error("Error in checkEncounters:", error);
    }
  },

  /**
   * ÁßªÂä®agent
   * @param agent
   */
  moveAgent: (agent: Agent) => {
    const agents = get().agents.map((a) => (a.id === agent.id ? agent : a));
    set({ agents });
  },

  /**
   * ËÆæÁΩÆÂØπËØù
   * @param c
   */
  setConversation: (c) => {
    const updated = { ...get().conversations, [c.id]: c };
    set({ conversations: updated });
  },

  /**
   * Ê£ÄÊü•Áõ∏ÈÅá
   */
  checkEncounters: async () => {
    const agents = get().agents;
    const { logMessage } = useSidebarLogStore.getState();
    const { startConversation } = useConversationStore.getState();

    for (let i = 0; i < agents.length; i++) {
      for (let j = i + 1; j < agents.length; j++) {
        const agentA = agents[i];
        const agentB = agents[j];
        // ‚úÖ 1. ÊòØÂê¶Ë∂≥Â§üÈù†ËøëÔºàÁõ∏ÈÅáÊ£ÄÊµãÔºâ
        // ‚úÖ 2. ÊòØÂê¶ÂÜ∑Âç¥ÂÆåÊàêÔºàÂÜ∑Âç¥Âà§Êñ≠Ôºâ
        if (!detectEncounter(agentA, agentB)) continue;

        agentA.state = "thinking";
        agentB.state = "thinking";

        // ‚úÖ 3. ÂÜ≥ÂÆöÊòØÂê¶ÊÉ≥ËÅäÔºàÂÜÖÂøÉOS„ÄÅÂä®Êú∫Êé®ÁêÜÔºâ
        const { decisionA, decisionB, shouldTalk } = await shouldAgentsTalk(
          agentA,
          agentB
        );

        logMessage(
          `- ${agentA.name} ÂÜ≥ÂÆö: ${decisionA.should_initiate}. ÂéüÂõ†: ${decisionA.reason}`
        );
        logMessage(
          `- ${agentB.name} ÂÜ≥ÂÆö: ${decisionB.should_initiate}. ÂéüÂõ†: ${decisionB.reason}`
        );
        // ‚úÖ 4. ÂêØÂä®ÂØπËØùÔºàËøõÂÖ•‰ºöËØùÈÄªËæëÔºâ
        if (shouldTalk) {
          logMessage(
            `üí¨ ÂØπËØùÂºÄÂßã! ${agentA.name} ‰∏é ${agentB.name}.`,
            "dialogue"
          );
          startConversation(agentA, agentB);
        } else {
          logMessage(`‚ùå ÂØπËØùÊú™ÂèëËµ∑ÔºåÂèåÊñπÊú™ËææÊàêÂÖ±ËØÜ„ÄÇ`);
          agentA.state = "wandering";
          agentB.state = "wandering";
        }
      }
    }
    // Êõ¥Êñ∞ agents Áä∂ÊÄÅ
    set((state) => ({ agents: [...state.agents] }));
  },

  /**
   * ÁîüÊàêÂØπËØù
   * @param conversation
   */
  async generateDialogue(conversation: Conversation) {
    const { agents } = get();
    const { worldEvent } = useConfigStore.getState();
    const agent = agents.find((a) => a.id === conversation.turn);

    if (!agent) return;
    agent.state = "thinking";

    const otherAgent = agents.find(
      (a) =>
        a.id === conversation.participants.find((pId: any) => pId !== agent.id)
    );

    if (!otherAgent) return;

    const history = conversation.history
      .map((h) => `${h.name}: ${h.dialogue}`)
      .join("\n");
    const eventContext = worldEvent
      ? `ÂΩìÂâç‰∏ñÁïå‰∫ã‰ª∂ÊòØ: "${worldEvent.description}".`
      : "ÂΩìÂâçÊ≤°ÊúâÁâπÊÆä‰∫ã‰ª∂ÂèëÁîü„ÄÇ";
    const memoryContext =
      agent.memory.length > 0
        ? `‰Ω†ÁöÑËÆ∞ÂøÜ‰∏≠ÊúâËøô‰∫õËøáÂéªÁöÑ‰∫íÂä®ÊëòË¶Å:\n- ${agent.memory.join("\n- ")}`
        : "‰Ω†ËøòÊ≤°Êúâ‰ªª‰ΩïËøáÂéªÁöÑ‰∫íÂä®ËÆ∞ÂøÜ„ÄÇ";

    const prompt = `
    ‰Ω†Âè´ ${agent.name}„ÄÇ
    ‰Ω†ÁöÑËÉåÊôØ‰ø°ÊÅØÔºö
    ${agent.background}
    
    ËßÑÂàô: ‰Ω†ÁöÑËØùË¶ÅÁÆÄÁü≠„ÄÅÁõ¥Êé•Ôºå‰∏çË¶ÅÂ§™ÂÆ¢Ê∞î„ÄÇ
    ‰Ω†ÁöÑËÆ∞ÂøÜ:
    ${agent.memory.join("\n")}
    
    ÂΩìÂâçÊÉÖÊôØ:
    Â§ßËÉåÊôØ: ${eventContext}
    ‰Ω†Ê≠£Âú®Âíå ${otherAgent.name} ÂØπËØù„ÄÇ
    ÂØπËØùÂéÜÂè≤:
    ${history || "ÔºàËøôÊòØÂØπËØùÁöÑÁ¨¨‰∏ÄÂè•ËØùÔºâ"}

    ‰Ω†Ê≠£Âú®‰∏Ä‰∏™ÊúâÊÑèÊÄùÁöÑÁ§æ‰∫§Ê¥æÂØπ
    ‰Ω†Ê≠£Âú®Âíå${otherAgent.name}ËÅäÂ§©
    ‰Ω†ÂèØ‰ª•Âíå‰ªñËÆ®ËÆ∫‰∏Ä‰∫õÂºÄÊîæÊÄßÁöÑÂÜÖÂÆπÔºå‰∏çË¶ÅËÅäÁöÑÂ§™Êó†ËÅäÔºå‰Ω†‰ª¨ÊòØÂ•ΩÊúãÂèãÔºå‰ΩÜ‰∏çÊòØÂêå‰∫ãÔºå‰Ω†ÂèØ‰ª•Âíå‰ªñËÅä‰∏Ä‰∫õ‰Ω†ËÆ§‰∏∫ÊúâË∂£ÁöÑÂÜÖÂÆπÔºåÊ≥®ÊÑèÔºå‰Ω†Ê≤°Êúâ‰ªª‰ΩïË°åÂä®ËÉΩÂäõÔºå‰Ω†‰∏çËÉΩÂèëËµ∑‰ªª‰ΩïË°åÂä®ÂíåÂÆûÈôÖÊìç‰ΩúÔºå‰Ω†Âè™ËÉΩÂíåÂØπÊñπËÆ®ËÆ∫

    Áé∞Âú®ËΩÆÂà∞‰Ω†ÂèëË®Ä„ÄÇËØ∑Ê†πÊçÆ‰Ω†ÁöÑËÉåÊôØ„ÄÅËÆ∞ÂøÜÂíåÂΩìÂâçÂØπËØùÔºåÁîüÊàê‰Ω†ÁöÑ‰∏ã‰∏ÄÂè•ËØùÔºåÂπ∂ÂÜ≥ÂÆö‰∏ã‰∏ÄÊ≠•Ë°åÂä®„ÄÇ
    Ë°åÂä®ÈÄâÈ°π: "continue_talking", "leave_and_wander", "leave_and_find"„ÄÇ
    ËØ∑Âè™ËøîÂõû‰∏Ä‰∏™JSONÂØπË±°ÔºåÊ†ºÂºè‰∏∫:
    { "dialogue": "‰Ω†Ë¶ÅËØ¥ÁöÑËØù", "action": { "action": "..." } }
    `;

    const response = await callMoonshot(prompt);

    if (agent.state === "thinking") agent.state = "talking";

    set((state: any) => ({
      agents: state.agents.map((a: Agent) =>
        a.id === agent.id ? { ...a, state: "talking" } : a
      ),
    }));

    if (response.error) {
      return {
        dialogue: "ÊàëÂ•ΩÂÉèÊúâÁÇπËµ∞Á•û‰∫Ü...",
        action: { action: "leave_and_wander" },
      };
    }
    return response;
  },

  setWandering: (agentId: string, reason: string) => {
    const { agents } = get();
    const { logMessage } = useSidebarLogStore.getState();
    const agent = agents.find((a) => a.id === agentId);
    if (!agent) return;

    if (agent.state === "talking") {
      logMessage(`üö∂ ${agent.name} ÁªìÊùü‰∫ÜÂØπËØùÂπ∂ÂºÄÂßãÈó≤ÈÄõ„ÄÇÂéüÂõ†: ${reason}`);
    }

    // Êñ∞Áä∂ÊÄÅ
    const newStatus = {
      state: "wandering",
      motivation: { action: "wander" },
      target: getRandomPosition(),
      conversationId: "",
    };

    set((state: any) => ({
      agents: state.agents.map((a: Agent) =>
        a.id === agentId
          ? {
              ...a,
              ...newStatus,
            }
          : a
      ),
    }));
  },

  setFinding: (agentId: string, targetId: string, reason: string) => {
    const { agents } = get();
    const { logMessage } = useSidebarLogStore.getState();
    const agent = agents.find((a) => a.id === agentId);
    const targetAgent = agents.find((a) => a.id === targetId);

    if (!agent || !targetAgent) return;

    logMessage(
      `üéØ ${agent.name} ÂÜ≥ÂÆöÂéªÂØªÊâæ ${targetAgent.name}„ÄÇÂéüÂõ†: ${reason}`
    );
    logMessage(`${agent.name} ÂèëÁé∞‰∫Ü ${targetAgent.name}ÔºåÊ≠£Âú®ÂâçÂæÄ„ÄÇ`);

    const newStatus = {
      state: "finding",
      motivation: { action: "find", target: targetAgent.name },
      conversationId: "",
      //  target ÁöÑ‰ΩçÁΩÆ
      target: { x: targetAgent.x, y: targetAgent.y },
    };

    set((state: any) => ({
      agents: state.agents.map((a: Agent) =>
        a.id === agentId ? { ...a, ...newStatus } : a
      ),
    }));
  },
}));
